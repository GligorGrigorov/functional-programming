
(define (accumulate op term init a next b)
  (define (loop i)
    (if (<= i b)
        (op (term i) (loop (next i)) )
        init
  ))
  (loop a)
)

(define (id x) x)
(define (next a) (+ a 1))
(define (1- a) (- a 1))
(define (print-dr y x) (display "\u250c"))
(define (print-dl y x) (display "\u2510"))
(define (print-ur y x) (display "\u2514"))
(define (print-ul y x) (display "\u2518"))
(define (print-h y x) (display "\u2500"))
(define (print-v y x) (display "\u2502 "))
(define (print-s y x) (display " "))
(define (print-nl y x) (display "\n"))

(define (a-print op n)
  (accumulate op id (display "") 1 next n)
  )

(define (lower n k)
  (a-print print-v (- n k))
  (print-ur 0 0)
  (a-print print-h (- (+ (* 4 k) 1) 4))
  (print-ul 0 0)
  (print-s 0 0)
  (a-print print-v (- n k))
  (print-nl 0 0)
  )
(define (upper n k)
  (a-print print-v (- k 1))
  (print-dr 0 0)
  (a-print print-h (+ 1 (- (* n 4) (* k 4))))
  (print-dl 0 0)
  (print-s 0 0)
  (a-print print-v (- k 1))
  (print-nl 0 0)
  )
(define (loop f a b)
  (define (id x) (f b x))
  (define (1+ x) (+ x 1))
  (define (op x y) (display ""))
  (accumulate op id 0 a 1+ b)
)
(define (squares n)
  (loop upper 1 n)
  (loop lower 1 n)
  )