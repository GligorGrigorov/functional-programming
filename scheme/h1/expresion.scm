
(define (next a) (+ a 1))
(define (index-of char str)
  (define (helper i)
    (if (< i (string-length str))
        (if (char=? char (string-ref str i))
            i
            (helper (next i))
            )
        -1
        )
    )
  (helper 0)
  )
(define (last-index-of char str)
  (define (helper i)
    (if (>= i 0)
        (if (char=? char (string-ref str i))
            i
            (helper (1- i))
            )
        -1
        )
    )
  (helper (- (string-length str) 1))
  )
(define (remove-char str char)
  (if (= (index-of char str)  -1)
      str
      (string-append (substring str 0 (index-of char str)) (substring str (+ 1 (index-of char str)) (string-length str)))
      )
  )
(define (remove-all-chars str char)
  (if (= (index-of char str)  -1)
      str
      (remove-all-chars (remove-char str char) char)
      )
  )

(define (expr-empty? expr)
  (= 0 (string-length expr))
)

(define (1- i) (- i 1))
(define (cut-spaces expr)
  (define (left i)
    (if (< i (string-length expr))
        (if (char-whitespace? (string-ref expr i))
            (left (next i))
            i
        )
        i
        )
    )
  (define (right i)
    (if (>= i 0)
        (if (char-whitespace? (string-ref expr i))
            (right (1- i))
            i
        )
        i
        )
    )
  (if (< (left 0) (+ 1 (right (- (string-length expr) 1))))
      (substring expr (left 0) (+ 1 (right (- (string-length expr) 1))))
      ""
      )
  )
(define (expr-number? expr)
  (define (helper i)
    (if (= i (string-length expr))
        #t
        (if (char-numeric? (string-ref expr i))
            (helper (next i))
            #f
            )
        )
    )
  (if (= 0 (string-length expr))
      #f
      (helper 0)
  )
  )
(define (expr-blank? expr)
  (define (helper i)
    (if (< i (string-length expr))
        (if (char=? #\space (string-ref expr i))
            (helper (next i))
            #f
            )
        #t
        )
    )
  (helper 0)
  )


(define (expr-valid? expr)
  (define (valid-op? expr char)
    (if (and
       (expr-valid? (substring expr 0 (index-of char expr)))
       (expr-valid? (substring expr (+ 1 (index-of char expr)) (string-length expr)))
       (not (expr-blank? (substring expr 0 (index-of char expr))))
       (not (expr-blank? (substring expr (+ 1 (index-of char expr)) (string-length expr))))
       )
      #t
      #f
    )
  )
  (if (expr-empty? expr)
      #t
      (if (expr-number? (cut-spaces expr))
          #t
          (if (<= 0 (index-of #\+ expr))
              (valid-op? expr #\+)
              (if (<= 0 (index-of #\- expr))
                  (valid-op? expr #\-)
                  (if (<= 0 (index-of #\* expr))
                      (valid-op? expr #\*)
                      (if (<= 0 (index-of #\/ expr))
                          (valid-op? expr #\/)
                          (if (<= 0 (index-of #\^ expr))
                              (valid-op? expr #\^)
                              #f
                          )
                      )
                  )
              )
          )
      )
  )
)
(define (left-cut expr char)
  (substring expr 0 (last-index-of char expr))
  )
(define (right-cut expr char)
  (substring expr (+ 1 (last-index-of char expr)) (string-length expr))
  )

(define (expr-rp expr)
  (define (concat expr delim char op)
    (string-append (expr-rp (left-cut expr char)) delim (expr-rp (right-cut expr char)) op)
  )
  (if (expr-valid? expr)
      (if (expr-empty? expr)
          expr
      (if (expr-number? (cut-spaces expr))
          (cut-spaces expr)
          (if (<= 0 (last-index-of #\+ expr))
              (concat expr "," #\+ "+")
              (if (<= 0 (last-index-of #\- expr))
                  (concat expr "," #\- "-")
                  (if (<= 0 (last-index-of #\* expr))
                      (concat expr "," #\* "*")
                      (if (<= 0 (last-index-of #\/ expr))
                          (concat expr "," #\/ "/")
                          (if (<= 0 (last-index-of #\^ expr))
                              (concat expr "," #\^ "^")
                              #f
                              )
                          )
                      )
                  )
              )
          )
      )
      #f
      )
  )
(define (str-to-int str)
  (define (helper i res)
    (if (= i (string-length str))
        res
        (helper (next i) (+ (- (char->integer (string-ref str i)) (char->integer #\0)) (* res 10)))
        )
    )
  (helper 0 0)
  )

(define (expr-eval expr)
  (define (calculate op expr char)
    (op (expr-eval (left-cut expr char)) (expr-eval (right-cut expr char)))
    )
  (if (expr-valid? expr)
      (if (expr-empty? expr)
          0
      (if (expr-number? (cut-spaces expr))
          (str-to-int (cut-spaces expr))
          (if (<= 0 (last-index-of #\+ expr))
              (calculate + expr #\+)
              (if (<= 0 (last-index-of #\- expr))
                  (calculate - expr #\-)
                  (if (<= 0 (last-index-of #\* expr))
                      (calculate * expr #\*)
                      (if (<= 0 (index-of #\/ expr))
                         (calculate / expr #\/)
                          (if (<= 0 (last-index-of #\^ expr))
                              (calculate expt expr #\^)
                              #f
                              )
                          )
                      )
                  )
              )
          )
      )
      #f
      )
  )